swagger: '2.0'
info:
  description: API Documents
  version: 1.0
  title: Hanaspeak API
  contact:
    email: trungthanh.dhbk@gmail.com
host: localhost:5000
basePath: /api/v1
# tags:
#   - name: pet
#     description: Everything about your Pets
#     externalDocs:
#       description: Find out more
#       url: 'http://swagger.io'
#   - name: store
#     description: Access to Petstore orders
#   - name: user
#     description: Operations about user
#     externalDocs:
#       description: Find out more about our store
#       url: 'http://swagger.io'
# schemes:
#   - http
tags:
  - name: Login
    description: Login onto the system and get JWT Token
  - name: Signup
    description: Signup onto the system
  - name: User
    description: Operations about user
  - name: Role
    description: Operations about role
schemes:
  - http
paths:
  /signup:
    post:
      tags:
        - Signup
      summary: Signup new account
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          description: Signup object
          schema:
            $ref: '#/definitions/Signup'
      responses:
        200:
          description: Successfully created
          schema:
            $ref: '#/definitions/User'
        409:
          description: Conflict, user has existed
          schema: 
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - Login
      summary: Allow users to log in, and to receive a Token
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          description: username and password
          schema:
            $ref: '#/definitions/Login'
      responses:
        200:
          description: Login success
          schema: '#/definitions/Login'
        400:
          description: Bad request, username and password are required
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found username or username and pasword are not matched
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema: 
            $ref: '#/definitions/Error'
  /users:
    post:
      tags:
        - User
      summary: Add new user
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: User object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Successfully created
          schema:
            $ref: '#/definitions/User'
        409:
          description: Conflict, User has existed
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - User
      security:
        - Bearer: []
      summary: Get all user or by query params
      description: ''
      produces:
        - application/json
      parameters:
        - in: query
          name: user_id
          description: user id
          type: integer
          allowReserved: true
        - in: query
          name: limit
          description: limit number of select record
          type: integer
          default: 10
          allowReserved: true
        - in: query
          name: page
          description: page number
          type: integer
          default: 0
          allowReserved: true
      responses:
        200:
          description: Get successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: Not found user by user_id
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
  '/users/{user_id}':
    put:
      tags:
        - User
      security:
        - Bearer: []
      summary: Update user by id
      description: ''
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: user_id
          required: true
          schema:
            type: integer
            default: 10
        - in: body
          name: body
          description: User data update
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
        404:
          description: user_id not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      security:
        - Bearer: []
      summary: Delete user by user_id
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The id that needs to be deleted
          required: true
          type: integer
      responses:
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Delete user error
          schema:
            $ref: '#/definitions/Error'
  /roles:
    post:
      tags:
        - Role
      summary: Add new Role
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: Role object
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: Successfully created
          schema:
            $ref: '#/definitions/Role'
        409:
          description: Conflict, Role has existed
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Role
      security:
        - Bearer: []
      summary: Get all role or by query params
      description: ''
      produces:
        - application/json
      parameters:
        - in: query
          name: role_id
          description: role_id
          type: integer
          allowReserved: true
        - in: query
          name: limit
          description: limit number of select record
          type: integer
          default: 10
          allowReserved: true
        - in: query
          name: page
          description: page number
          type: integer
          default: 0
          allowReserved: true
      responses:
        200:
          description: Get successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        404:
          description: Not found role by role_id
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
  '/roles/{role_id}':
    put:
      tags:
        - Role
      security:
        - Bearer: []
      summary: Update role by id
      description: ''
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: role_id
          description: role_id
          required: true
          schema:
            type: integer
            default: 10
        - in: body
          name: body
          description: Role data update
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
        404:
          description: role_id not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Role
      security:
        - Bearer: []
      summary: Delete role by role_id
      description: This can only be done by the logged in user.
      operationId: deleteRole
      produces:
        - application/json
      parameters:
        - name: role_id
          in: path
          description: The id that needs to be deleted
          required: true
          type: integer
      responses:
        404:
          description: Role not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Delete user error
          schema:
            $ref: '#/definitions/Error'

  # /pet:
  #   post:
  #     tags:
  #       - pet
  #     summary: Add a new pet to the store
  #     description: ''
  #     operationId: addPet
  #     consumes:
  #       - application/json
  #       - application/xml
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: Pet object that needs to be added to the store
  #         required: true
  #         schema:
  #           $ref: '#/definitions/Pet'
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #   put:
  #     tags:
  #       - pet
  #     summary: Update an existing pet
  #     description: ''
  #     operationId: updatePet
  #     consumes:
  #       - application/json
  #       - application/xml
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: Pet object that needs to be added to the store
  #         required: true
  #         schema:
  #           $ref: '#/definitions/Pet'
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #       '405':
  #         description: Validation exception
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # /pet/findByStatus:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findPetsByStatus
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: true
  #         type: array
  #         items:
  #           type: string
  #           enum:
  #             - available
  #             - pending
  #             - sold
  #           default: available
  #         collectionFormat: multi
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/Pet'
  #       '400':
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # /pet/findByTags:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description: >-
  #       Muliple tags can be provided with comma separated strings. Use        
  #       tag1, tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         type: array
  #         items:
  #           type: string
  #         collectionFormat: multi
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/Pet'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     deprecated: true
  # '/pet/{petId}':
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         type: integer
  #         format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           $ref: '#/definitions/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     description: ''
  #     operationId: updatePetWithForm
  #     consumes:
  #       - application/x-www-form-urlencoded
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         type: integer
  #         format: int64
  #       - name: name
  #         in: formData
  #         description: Updated name of the pet
  #         required: false
  #         type: string
  #       - name: status
  #         in: formData
  #         description: Updated status of the pet
  #         required: false
  #         type: string
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     description: ''
  #     operationId: deletePet
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         type: integer
  #         format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # '/pet/{petId}/uploadImage':
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     consumes:
  #       - multipart/form-data
  #     produces:
  #       - application/json
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         type: integer
  #         format: int64
  #       - name: additionalMetadata
  #         in: formData
  #         description: Additional data to pass to server
  #         required: false
  #         type: string
  #       - name: file
  #         in: formData
  #         description: file to upload
  #         required: false
  #         type: file
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           $ref: '#/definitions/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     produces:
  #       - application/json
  #     parameters: []
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           type: object
  #           additionalProperties:
  #             type: integer
  #             format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     description: ''
  #     operationId: placeOrder
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: order placed for purchasing the pet
  #         required: true
  #         schema:
  #           $ref: '#/definitions/Order'
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           $ref: '#/definitions/Order'
  #       '400':
  #         description: Invalid Order
  # '/store/order/{orderId}':
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with value >= 1 and <= 10.        
  #       Other values will generated exceptions
  #     operationId: getOrderById
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of pet that needs to be fetched
  #         required: true
  #         type: integer
  #         maximum: 10
  #         minimum: 1
  #         format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           $ref: '#/definitions/Order'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with positive integer value.        
  #       Negative or non-integer values will generate API errors
  #     operationId: deleteOrder
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         type: integer
  #         minimum: 1
  #         format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: Created user object
  #         required: true
  #         schema:
  #           $ref: '#/definitions/User'
  #     responses:
  #       default:
  #         description: successful operation
  # /user/createWithArray:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: ''
  #     operationId: createUsersWithArrayInput
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: List of user object
  #         required: true
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/User'
  #     responses:
  #       default:
  #         description: successful operation
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: ''
  #     operationId: createUsersWithListInput
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         description: List of user object
  #         required: true
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/User'
  #     responses:
  #       default:
  #         description: successful operation
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: true
  #         type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           type: string
  #         headers:
  #           X-Rate-Limit:
  #             type: integer
  #             format: int32
  #             description: calls per hour allowed by the user
  #           X-Expires-After:
  #             type: string
  #             format: date-time
  #             description: date in UTC when token expires
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # '/user/{username}':
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     description: ''
  #     operationId: getUserByName
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched. Use user1 for testing. '
  #         required: true
  #         type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         schema:
  #           $ref: '#/definitions/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be updated
  #         required: true
  #         type: string
  #       - in: body
  #         name: body
  #         description: Updated user object
  #         required: true
  #         schema:
  #           $ref: '#/definitions/User'
  #     responses:
  #       '400':
  #         description: Invalid user supplied
  #       '404':
  #         description: User not found
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     produces:
  #       - application/xml
  #       - application/json
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header 
definitions:
  Signup:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
  Login:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
    example:
      username: thanhtt1
      password: thanhtt1
  User:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      phone:
        type: number
      active:
        type: integer
      example:
        username: thanhtt1
        password: thanhtt1
        email: thanhtt1@gmail.com
        phone: 0912345678
        active: 1
  Role:
    type: object
    properties:
      name:
        description: Role name in the system
        type: string
      display_name:
        description: Role name when display on views
        type: string
      default_page:
        description: Default page of a role
        type: string
      example:
        name: admin
        display_name: Administrator
        default_page: Admin dashboard page
  Error:
    type: object
    required:
      - status
      - code
      - message
    properties:
      status:
        type: string
      code:
        type: integer
      message:
        type: string
      data:
        type: object
    example:
      satatus: error
      code: 400
      message: Message for error
  Success:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
      data:
        type: object
    example:
      status: success
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
